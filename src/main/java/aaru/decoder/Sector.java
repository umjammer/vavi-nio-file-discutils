//
// Aaru Data Preservation Suite
//
//
// Filename       : Sector.cs
// Author(s)      : Natalia Portillo <claunia@claunia.com>
//
// Component      : Device structures decoders.
//
// Description
//
//     Decodes and descrambles CompactDisc sectors.
//
// License
//
//     This library is free software; you can redistribute it and/or modify
//     it under the terms of the GNU Lesser General Public License as
//     published by the Free Software Foundation; either version 2.1 of the
//     License, or (at your option) any later version.
//
//     This library is distributed in the hope that it will be useful, but
//     WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//     Lesser General Public License for more details.
//
//     You should have received a copy of the GNU Lesser General Public
//     License along with this library; if not, see <http://www.gnu.org/licenses/>.
//
//
// Copyright Â© 2011-2021 Natalia Portillo
//

package aaru.decoder;


import java.util.Arrays;

import aaru.checksum.CdChecksums;


public class Sector {

    public static final byte[] ScrambleTable = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x80, 0x00, 0x60, 0x00, 0x28,
            0x00, 0x1E, (byte) 0x80, 0x08, 0x60, 0x06, (byte) 0xA8, 0x02, (byte) 0xFE, (byte) 0x81, (byte) 0x80, 0x60, 0x60, 0x28, 0x28, 0x1E, (byte) 0x9E, (byte) 0x88,
            0x68, 0x66, (byte) 0xAE, (byte) 0xAA, (byte) 0xFC, 0x7F, 0x01, (byte) 0xE0, 0x00, 0x48, 0x00, 0x36, (byte) 0x80, 0x16, (byte) 0xE0, 0x0E, (byte) 0xC8, 0x04,
            0x56, (byte) 0x83, 0x7E, (byte) 0xE1, (byte) 0xE0, 0x48, 0x48, 0x36, (byte) 0xB6, (byte) 0x96, (byte) 0xF6, (byte) 0xEE, (byte) 0xC6, (byte) 0xCC, 0x52, (byte) 0xD5, (byte) 0xFD, (byte) 0x9F,
            0x01, (byte) 0xA8, 0x00, 0x7E, (byte) 0x80, 0x20, 0x60, 0x18, 0x28, 0x0A, (byte) 0x9E, (byte) 0x87, 0x28, 0x62, (byte) 0x9E, (byte) 0xA9, (byte) 0xA8, 0x7E,
            (byte) 0xFE, (byte) 0xA0, 0x40, 0x78, 0x30, 0x22, (byte) 0x94, 0x19, (byte) 0xAF, 0x4A, (byte) 0xFC, 0x37, 0x01, (byte) 0xD6, (byte) 0x80, 0x5E, (byte) 0xE0, 0x38,
            0x48, 0x12, (byte) 0xB6, (byte) 0x8D, (byte) 0xB6, (byte) 0xE5, (byte) 0xB6, (byte) 0xCB, 0x36, (byte) 0xD7, 0x56, (byte) 0xDE, (byte) 0xBE, (byte) 0xD8, 0x70, 0x5A, (byte) 0xA4, 0x3B,
            0x3B, 0x53, 0x53, 0x7D, (byte) 0xFD, (byte) 0xE1, (byte) 0x81, (byte) 0x88, 0x60, 0x66, (byte) 0xA8, 0x2A, (byte) 0xFE, (byte) 0x9F, 0x00, 0x68, 0x00, 0x2E,
            (byte) 0x80, 0x1C, 0x60, 0x09, (byte) 0xE8, 0x06, (byte) 0xCE, (byte) 0x82, (byte) 0xD4, 0x61, (byte) 0x9F, 0x68, 0x68, 0x2E, (byte) 0xAE, (byte) 0x9C, 0x7C, 0x69,
            (byte) 0xE1, (byte) 0xEE, (byte) 0xC8, 0x4C, 0x56, (byte) 0xB5, (byte) 0xFE, (byte) 0xF7, 0x00, 0x46, (byte) 0x80, 0x32, (byte) 0xE0, 0x15, (byte) 0x88, 0x0F, 0x26, (byte) 0x84,
            0x1A, (byte) 0xE3, 0x4B, 0x09, (byte) 0xF7, 0x46, (byte) 0xC6, (byte) 0xB2, (byte) 0xD2, (byte) 0xF5, (byte) 0x9D, (byte) 0x87, 0x29, (byte) 0xA2, (byte) 0x9E, (byte) 0xF9, (byte) 0xA8, 0x42,
            (byte) 0xFE, (byte) 0xB1, (byte) 0x80, 0x74, 0x60, 0x27, 0x68, 0x1A, (byte) 0xAE, (byte) 0x8B, 0x3C, 0x67, 0x51, (byte) 0xEA, (byte) 0xBC, 0x4F, 0x31, (byte) 0xF4,
            0x14, 0x47, 0x4F, 0x72, (byte) 0xB4, 0x25, (byte) 0xB7, 0x5B, 0x36, (byte) 0xBB, 0x56, (byte) 0xF3, 0x7E, (byte) 0xC5, (byte) 0xE0, 0x53, 0x08, 0x3D,
            (byte) 0xC6, (byte) 0x91, (byte) 0x92, (byte) 0xEC, 0x6D, (byte) 0x8D, (byte) 0xED, (byte) 0xA5, (byte) 0x8D, (byte) 0xBB, 0x25, (byte) 0xB3, 0x5B, 0x35, (byte) 0xFB, 0x57, 0x03, 0x7E,
            (byte) 0x81, (byte) 0xE0, 0x60, 0x48, 0x28, 0x36, (byte) 0x9E, (byte) 0x96, (byte) 0xE8, 0x6E, (byte) 0xCE, (byte) 0xAC, 0x54, 0x7D, (byte) 0xFF, 0x61, (byte) 0x80, 0x28,
            0x60, 0x1E, (byte) 0xA8, 0x08, 0x7E, (byte) 0x86, (byte) 0xA0, 0x62, (byte) 0xF8, 0x29, (byte) 0x82, (byte) 0x9E, (byte) 0xE1, (byte) 0xA8, 0x48, 0x7E, (byte) 0xB6, (byte) 0xA0,
            0x76, (byte) 0xF8, 0x26, (byte) 0xC2, (byte) 0x9A, (byte) 0xD1, (byte) 0xAB, 0x1C, 0x7F, 0x49, (byte) 0xE0, 0x36, (byte) 0xC8, 0x16, (byte) 0xD6, (byte) 0x8E, (byte) 0xDE, (byte) 0xE4,
            0x58, 0x4B, 0x7A, (byte) 0xB7, 0x63, 0x36, (byte) 0xA9, (byte) 0xD6, (byte) 0xFE, (byte) 0xDE, (byte) 0xC0, 0x58, 0x50, 0x3A, (byte) 0xBC, 0x13, 0x31, (byte) 0xCD,
            (byte) 0xD4, 0x55, (byte) 0x9F, 0x7F, 0x28, 0x20, 0x1E, (byte) 0x98, 0x08, 0x6A, (byte) 0x86, (byte) 0xAF, 0x22, (byte) 0xFC, 0x19, (byte) 0x81, (byte) 0xCA, (byte) 0xE0,
            0x57, 0x08, 0x3E, (byte) 0x86, (byte) 0x90, 0x62, (byte) 0xEC, 0x29, (byte) 0x8D, (byte) 0xDE, (byte) 0xE5, (byte) 0x98, 0x4B, 0x2A, (byte) 0xB7, 0x5F, 0x36, (byte) 0xB8,
            0x16, (byte) 0xF2, (byte) 0x8E, (byte) 0xC5, (byte) 0xA4, 0x53, 0x3B, 0x7D, (byte) 0xD3, 0x61, (byte) 0x9D, (byte) 0xE8, 0x69, (byte) 0x8E, (byte) 0xAE, (byte) 0xE4, 0x7C, 0x4B,
            0x61, (byte) 0xF7, 0x68, 0x46, (byte) 0xAE, (byte) 0xB2, (byte) 0xFC, 0x75, (byte) 0x81, (byte) 0xE7, 0x20, 0x4A, (byte) 0x98, 0x37, 0x2A, (byte) 0x96, (byte) 0x9F, 0x2E,
            (byte) 0xE8, 0x1C, 0x4E, (byte) 0x89, (byte) 0xF4, 0x66, (byte) 0xC7, 0x6A, (byte) 0xD2, (byte) 0xAF, 0x1D, (byte) 0xBC, 0x09, (byte) 0xB1, (byte) 0xC6, (byte) 0xF4, 0x52, (byte) 0xC7,
            0x7D, (byte) 0x92, (byte) 0xA1, (byte) 0xAD, (byte) 0xB8, 0x7D, (byte) 0xB2, (byte) 0xA1, (byte) 0xB5, (byte) 0xB8, 0x77, 0x32, (byte) 0xA6, (byte) 0x95, (byte) 0xBA, (byte) 0xEF, 0x33, 0x0C,
            0x15, (byte) 0xC5, (byte) 0xCF, 0x13, 0x14, 0x0D, (byte) 0xCF, 0x45, (byte) 0x94, 0x33, 0x2F, 0x55, (byte) 0xDC, 0x3F, 0x19, (byte) 0xD0, 0x0A, (byte) 0xDC,
            0x07, 0x19, (byte) 0xC2, (byte) 0x8A, (byte) 0xD1, (byte) 0xA7, 0x1C, 0x7A, (byte) 0x89, (byte) 0xE3, 0x26, (byte) 0xC9, (byte) 0xDA, (byte) 0xD6, (byte) 0xDB, 0x1E, (byte) 0xDB, 0x48,
            0x5B, 0x76, (byte) 0xBB, 0x66, (byte) 0xF3, 0x6A, (byte) 0xC5, (byte) 0xEF, 0x13, 0x0C, 0x0D, (byte) 0xC5, (byte) 0xC5, (byte) 0x93, 0x13, 0x2D, (byte) 0xCD, (byte) 0xDD,
            (byte) 0x95, (byte) 0x99, (byte) 0xAF, 0x2A, (byte) 0xFC, 0x1F, 0x01, (byte) 0xC8, 0x00, 0x56, (byte) 0x80, 0x3E, (byte) 0xE0, 0x10, 0x48, 0x0C, 0x36, (byte) 0x85,
            (byte) 0xD6, (byte) 0xE3, 0x1E, (byte) 0xC9, (byte) 0xC8, 0x56, (byte) 0xD6, (byte) 0xBE, (byte) 0xDE, (byte) 0xF0, 0x58, 0x44, 0x3A, (byte) 0xB3, 0x53, 0x35, (byte) 0xFD, (byte) 0xD7,
            0x01, (byte) 0x9E, (byte) 0x80, 0x68, 0x60, 0x2E, (byte) 0xA8, 0x1C, 0x7E, (byte) 0x89, (byte) 0xE0, 0x66, (byte) 0xC8, 0x2A, (byte) 0xD6, (byte) 0x9F, 0x1E, (byte) 0xE8,
            0x08, 0x4E, (byte) 0x86, (byte) 0xB4, 0x62, (byte) 0xF7, 0x69, (byte) 0x86, (byte) 0xAE, (byte) 0xE2, (byte) 0xFC, 0x49, (byte) 0x81, (byte) 0xF6, (byte) 0xE0, 0x46, (byte) 0xC8, 0x32,
            (byte) 0xD6, (byte) 0x95, (byte) 0x9E, (byte) 0xEF, 0x28, 0x4C, 0x1E, (byte) 0xB5, (byte) 0xC8, 0x77, 0x16, (byte) 0xA6, (byte) 0x8E, (byte) 0xFA, (byte) 0xE4, 0x43, 0x0B, 0x71,
            (byte) 0xC7, 0x64, 0x52, (byte) 0xAB, 0x7D, (byte) 0xBF, 0x61, (byte) 0xB0, 0x28, 0x74, 0x1E, (byte) 0xA7, 0x48, 0x7A, (byte) 0xB6, (byte) 0xA3, 0x36, (byte) 0xF9,
            (byte) 0xD6, (byte) 0xC2, (byte) 0xDE, (byte) 0xD1, (byte) 0x98, 0x5C, 0x6A, (byte) 0xB9, (byte) 0xEF, 0x32, (byte) 0xCC, 0x15, (byte) 0x95, (byte) 0xCF, 0x2F, 0x14, 0x1C, 0x0F,
            0x49, (byte) 0xC4, 0x36, (byte) 0xD3, 0x56, (byte) 0xDD, (byte) 0xFE, (byte) 0xD9, (byte) 0x80, 0x5A, (byte) 0xE0, 0x3B, 0x08, 0x13, 0x46, (byte) 0x8D, (byte) 0xF2, (byte) 0xE5,
            (byte) 0x85, (byte) 0x8B, 0x23, 0x27, 0x59, (byte) 0xDA, (byte) 0xBA, (byte) 0xDB, 0x33, 0x1B, 0x55, (byte) 0xCB, 0x7F, 0x17, 0x60, 0x0E, (byte) 0xA8, 0x04,
            0x7E, (byte) 0x83, 0x60, 0x61, (byte) 0xE8, 0x28, 0x4E, (byte) 0x9E, (byte) 0xB4, 0x68, 0x77, 0x6E, (byte) 0xA6, (byte) 0xAC, 0x7A, (byte) 0xFD, (byte) 0xE3, 0x01,
            (byte) 0x89, (byte) 0xC0, 0x66, (byte) 0xD0, 0x2A, (byte) 0xDC, 0x1F, 0x19, (byte) 0xC8, 0x0A, (byte) 0xD6, (byte) 0x87, 0x1E, (byte) 0xE2, (byte) 0x88, 0x49, (byte) 0xA6, (byte) 0xB6,
            (byte) 0xFA, (byte) 0xF6, (byte) 0xC3, 0x06, (byte) 0xD1, (byte) 0xC2, (byte) 0xDC, 0x51, (byte) 0x99, (byte) 0xFC, 0x6A, (byte) 0xC1, (byte) 0xEF, 0x10, 0x4C, 0x0C, 0x35, (byte) 0xC5,
            (byte) 0xD7, 0x13, 0x1E, (byte) 0x8D, (byte) 0xC8, 0x65, (byte) 0x96, (byte) 0xAB, 0x2E, (byte) 0xFF, 0x5C, 0x40, 0x39, (byte) 0xF0, 0x12, (byte) 0xC4, 0x0D, (byte) 0x93,
            0x45, (byte) 0xAD, (byte) 0xF3, 0x3D, (byte) 0x85, (byte) 0xD1, (byte) 0xA3, 0x1C, 0x79, (byte) 0xC9, (byte) 0xE2, (byte) 0xD6, (byte) 0xC9, (byte) 0x9E, (byte) 0xD6, (byte) 0xE8, 0x5E, (byte) 0xCE,
            (byte) 0xB8, 0x54, 0x72, (byte) 0xBF, 0x65, (byte) 0xB0, 0x2B, 0x34, 0x1F, 0x57, 0x48, 0x3E, (byte) 0xB6, (byte) 0x90, 0x76, (byte) 0xEC, 0x26, (byte) 0xCD,
            (byte) 0xDA, (byte) 0xD5, (byte) 0x9B, 0x1F, 0x2B, 0x48, 0x1F, 0x76, (byte) 0x88, 0x26, (byte) 0xE6, (byte) 0x9A, (byte) 0xCA, (byte) 0xEB, 0x17, 0x0F, 0x4E, (byte) 0x84,
            0x34, 0x63, 0x57, 0x69, (byte) 0xFE, (byte) 0xAE, (byte) 0xC0, 0x7C, 0x50, 0x21, (byte) 0xFC, 0x18, 0x41, (byte) 0xCA, (byte) 0xB0, 0x57, 0x34, 0x3E,
            (byte) 0x97, 0x50, 0x6E, (byte) 0xBC, 0x2C, 0x71, (byte) 0xDD, (byte) 0xE4, 0x59, (byte) 0x8B, 0x7A, (byte) 0xE7, 0x63, 0x0A, (byte) 0xA9, (byte) 0xC7, 0x3E, (byte) 0xD2,
            (byte) 0x90, 0x5D, (byte) 0xAC, 0x39, (byte) 0xBD, (byte) 0xD2, (byte) 0xF1, (byte) 0x9D, (byte) 0x84, 0x69, (byte) 0xA3, 0x6E, (byte) 0xF9, (byte) 0xEC, 0x42, (byte) 0xCD, (byte) 0xF1, (byte) 0x95,
            (byte) 0x84, 0x6F, 0x23, 0x6C, 0x19, (byte) 0xED, (byte) 0xCA, (byte) 0xCD, (byte) 0x97, 0x15, (byte) 0xAE, (byte) 0x8F, 0x3C, 0x64, 0x11, (byte) 0xEB, 0x4C, 0x4F,
            0x75, (byte) 0xF4, 0x27, 0x07, 0x5A, (byte) 0x82, (byte) 0xBB, 0x21, (byte) 0xB3, 0x58, 0x75, (byte) 0xFA, (byte) 0xA7, 0x03, 0x3A, (byte) 0x81, (byte) 0xD3, 0x20,
            0x5D, (byte) 0xD8, 0x39, (byte) 0x9A, (byte) 0x92, (byte) 0xEB, 0x2D, (byte) 0x8F, 0x5D, (byte) 0xA4, 0x39, (byte) 0xBB, 0x52, (byte) 0xF3, 0x7D, (byte) 0x85, (byte) 0xE1, (byte) 0xA3,
            0x08, 0x79, (byte) 0xC6, (byte) 0xA2, (byte) 0xD2, (byte) 0xF9, (byte) 0x9D, (byte) 0x82, (byte) 0xE9, (byte) 0xA1, (byte) 0x8E, (byte) 0xF8, 0x64, 0x42, (byte) 0xAB, 0x71, (byte) 0xBF, 0x64,
            0x70, 0x2B, 0x64, 0x1F, 0x6B, 0x48, 0x2F, 0x76, (byte) 0x9C, 0x26, (byte) 0xE9, (byte) 0xDA, (byte) 0xCE, (byte) 0xDB, 0x14, 0x5B, 0x4F, 0x7B,
            0x74, 0x23, 0x67, 0x59, (byte) 0xEA, (byte) 0xBA, (byte) 0xCF, 0x33, 0x14, 0x15, (byte) 0xCF, 0x4F, 0x14, 0x34, 0x0F, 0x57, 0x44, 0x3E,
            (byte) 0xB3, 0x50, 0x75, (byte) 0xFC, 0x27, 0x01, (byte) 0xDA, (byte) 0x80, 0x5B, 0x20, 0x3B, 0x58, 0x13, 0x7A, (byte) 0x8D, (byte) 0xE3, 0x25, (byte) 0x89,
            (byte) 0xDB, 0x26, (byte) 0xDB, 0x5A, (byte) 0xDB, 0x7B, 0x1B, 0x63, 0x4B, 0x69, (byte) 0xF7, 0x6E, (byte) 0xC6, (byte) 0xAC, 0x52, (byte) 0xFD, (byte) 0xFD, (byte) 0x81,
            (byte) 0x81, (byte) 0xA0, 0x60, 0x78, 0x28, 0x22, (byte) 0x9E, (byte) 0x99, (byte) 0xA8, 0x6A, (byte) 0xFE, (byte) 0xAF, 0x00, 0x7C, 0x00, 0x21, (byte) 0xC0, 0x18,
            0x50, 0x0A, (byte) 0xBC, 0x07, 0x31, (byte) 0xC2, (byte) 0x94, 0x51, (byte) 0xAF, 0x7C, 0x7C, 0x21, (byte) 0xE1, (byte) 0xD8, 0x48, 0x5A, (byte) 0xB6, (byte) 0xBB,
            0x36, (byte) 0xF3, 0x56, (byte) 0xC5, (byte) 0xFE, (byte) 0xD3, 0x00, 0x5D, (byte) 0xC0, 0x39, (byte) 0x90, 0x12, (byte) 0xEC, 0x0D, (byte) 0x8D, (byte) 0xC5, (byte) 0xA5, (byte) 0x93,
            0x3B, 0x2D, (byte) 0xD3, 0x5D, (byte) 0x9D, (byte) 0xF9, (byte) 0xA9, (byte) 0x82, (byte) 0xFE, (byte) 0xE1, (byte) 0x80, 0x48, 0x60, 0x36, (byte) 0xA8, 0x16, (byte) 0xFE, (byte) 0x8E,
            (byte) 0xC0, 0x64, 0x50, 0x2B, 0x7C, 0x1F, 0x61, (byte) 0xC8, 0x28, 0x56, (byte) 0x9E, (byte) 0xBE, (byte) 0xE8, 0x70, 0x4E, (byte) 0xA4, 0x34, 0x7B,
            0x57, 0x63, 0x7E, (byte) 0xA9, (byte) 0xE0, 0x7E, (byte) 0xC8, 0x20, 0x56, (byte) 0x98, 0x3E, (byte) 0xEA, (byte) 0x90, 0x4F, 0x2C, 0x34, 0x1D, (byte) 0xD7,
            0x49, (byte) 0x9E, (byte) 0xB6, (byte) 0xE8, 0x76, (byte) 0xCE, (byte) 0xA6, (byte) 0xD4, 0x7A, (byte) 0xDF, 0x63, 0x18, 0x29, (byte) 0xCA, (byte) 0x9E, (byte) 0xD7, 0x28, 0x5E,
            (byte) 0x9E, (byte) 0xB8, 0x68, 0x72, (byte) 0xAE, (byte) 0xA5, (byte) 0xBC, 0x7B, 0x31, (byte) 0xE3, 0x54, 0x49, (byte) 0xFF, 0x76, (byte) 0xC0, 0x26, (byte) 0xD0, 0x1A,
            (byte) 0xDC, 0x0B, 0x19, (byte) 0xC7, 0x4A, (byte) 0xD2, (byte) 0xB7, 0x1D, (byte) 0xB6, (byte) 0x89, (byte) 0xB6, (byte) 0xE6, (byte) 0xF6, (byte) 0xCA, (byte) 0xC6, (byte) 0xD7, 0x12, (byte) 0xDE,
            (byte) 0x8D, (byte) 0x98, 0x65, (byte) 0xAA, (byte) 0xAB, 0x3F, 0x3F, 0x50, 0x10, 0x3C, 0x0C, 0x11, (byte) 0xC5, (byte) 0xCC, 0x53, 0x15, (byte) 0xFD, (byte) 0xCF,
            0x01, (byte) 0x94, 0x00, 0x6F, 0x40, 0x2C, 0x30, 0x1D, (byte) 0xD4, 0x09, (byte) 0x9F, 0x46, (byte) 0xE8, 0x32, (byte) 0xCE, (byte) 0x95, (byte) 0x94, 0x6F,
            0x2F, 0x6C, 0x1C, 0x2D, (byte) 0xC9, (byte) 0xDD, (byte) 0x96, (byte) 0xD9, (byte) 0xAE, (byte) 0xDA, (byte) 0xFC, 0x5B, 0x01, (byte) 0xFB, 0x40, 0x43, 0x70, 0x31,
            (byte) 0xE4, 0x14, 0x4B, 0x4F, 0x77, 0x74, 0x26, (byte) 0xA7, 0x5A, (byte) 0xFA, (byte) 0xBB, 0x03, 0x33, 0x41, (byte) 0xD5, (byte) 0xF0, 0x5F, 0x04,
            0x38, 0x03, 0x52, (byte) 0x81, (byte) 0xFD, (byte) 0xA0, 0x41, (byte) 0xB8, 0x30, 0x72, (byte) 0x94, 0x25, (byte) 0xAF, 0x5B, 0x3C, 0x3B, 0x51, (byte) 0xD3,
            0x7C, 0x5D, (byte) 0xE1, (byte) 0xF9, (byte) 0x88, 0x42, (byte) 0xE6, (byte) 0xB1, (byte) 0x8A, (byte) 0xF4, 0x67, 0x07, 0x6A, (byte) 0x82, (byte) 0xAF, 0x21, (byte) 0xBC, 0x18,
            0x71, (byte) 0xCA, (byte) 0xA4, 0x57, 0x3B, 0x7E, (byte) 0x93, 0x60, 0x6D, (byte) 0xE8, 0x2D, (byte) 0x8E, (byte) 0x9D, (byte) 0xA4, 0x69, (byte) 0xBB, 0x6E, (byte) 0xF3,
            0x6C, 0x45, (byte) 0xED, (byte) 0xF3, 0x0D, (byte) 0x85, (byte) 0xC5, (byte) 0xA3, 0x13, 0x39, (byte) 0xCD, (byte) 0xD2, (byte) 0xD5, (byte) 0x9D, (byte) 0x9F, 0x29, (byte) 0xA8, 0x1E,
            (byte) 0xFE, (byte) 0x88, 0x40, 0x66, (byte) 0xB0, 0x2A, (byte) 0xF4, 0x1F, 0x07, 0x48, 0x02, (byte) 0xB6, (byte) 0x81, (byte) 0xB6, (byte) 0xE0, 0x76, (byte) 0xC8, 0x26,
            (byte) 0xD6, (byte) 0x9A, (byte) 0xDE, (byte) 0xEB, 0x18, 0x4F, 0x4A, (byte) 0xB4, 0x37, 0x37, 0x56, (byte) 0x96, (byte) 0xBE, (byte) 0xEE, (byte) 0xF0, 0x4C, 0x44, 0x35,
            (byte) 0xF3, 0x57, 0x05, (byte) 0xFE, (byte) 0x83, 0x00, 0x61, (byte) 0xC0, 0x28, 0x50, 0x1E, (byte) 0xBC, 0x08, 0x71, (byte) 0xC6, (byte) 0xA4, 0x52, (byte) 0xFB,
            0x7D, (byte) 0x83, 0x61, (byte) 0xA1, (byte) 0xE8, 0x78, 0x4E, (byte) 0xA2, (byte) 0xB4, 0x79, (byte) 0xB7, 0x62, (byte) 0xF6, (byte) 0xA9, (byte) 0x86, (byte) 0xFE, (byte) 0xE2, (byte) 0xC0,
            0x49, (byte) 0x90, 0x36, (byte) 0xEC, 0x16, (byte) 0xCD, (byte) 0xCE, (byte) 0xD5, (byte) 0x94, 0x5F, 0x2F, 0x78, 0x1C, 0x22, (byte) 0x89, (byte) 0xD9, (byte) 0xA6, (byte) 0xDA,
            (byte) 0xFA, (byte) 0xDB, 0x03, 0x1B, 0x41, (byte) 0xCB, 0x70, 0x57, 0x64, 0x3E, (byte) 0xAB, 0x50, 0x7F, 0x7C, 0x20, 0x21, (byte) 0xD8, 0x18,
            0x5A, (byte) 0x8A, (byte) 0xBB, 0x27, 0x33, 0x5A, (byte) 0x95, (byte) 0xFB, 0x2F, 0x03, 0x5C, 0x01, (byte) 0xF9, (byte) 0xC0, 0x42, (byte) 0xD0, 0x31, (byte) 0x9C,
            0x14, 0x69, (byte) 0xCF, 0x6E, (byte) 0xD4, 0x2C, 0x5F, 0x5D, (byte) 0xF8, 0x39, (byte) 0x82, (byte) 0x92, (byte) 0xE1, (byte) 0xAD, (byte) 0x88, 0x7D, (byte) 0xA6, (byte) 0xA1,
            (byte) 0xBA, (byte) 0xF8, 0x73, 0x02, (byte) 0xA5, (byte) 0xC1, (byte) 0xBB, 0x10, 0x73, 0x4C, 0x25, (byte) 0xF5, (byte) 0xDB, 0x07, 0x1B, 0x42, (byte) 0x8B, 0x71,
            (byte) 0xA7, 0x64, 0x7A, (byte) 0xAB, 0x63, 0x3F, 0x69, (byte) 0xD0, 0x2E, (byte) 0xDC, 0x1C, 0x59, (byte) 0xC9, (byte) 0xFA, (byte) 0xD6, (byte) 0xC3, 0x1E, (byte) 0xD1,
            (byte) 0xC8, 0x5C, 0x56, (byte) 0xB9, (byte) 0xFE, (byte) 0xF2, (byte) 0xC0, 0x45, (byte) 0x90, 0x33, 0x2C, 0x15, (byte) 0xDD, (byte) 0xCF, 0x19, (byte) 0x94, 0x0A, (byte) 0xEF,
            0x47, 0x0C, 0x32, (byte) 0x85, (byte) 0xD5, (byte) 0xA3, 0x1F, 0x39, (byte) 0xC8, 0x12, (byte) 0xD6, (byte) 0x8D, (byte) 0x9E, (byte) 0xE5, (byte) 0xA8, 0x4B, 0x3E, (byte) 0xB7,
            0x50, 0x76, (byte) 0xBC, 0x26, (byte) 0xF1, (byte) 0xDA, (byte) 0xC4, 0x5B, 0x13, 0x7B, 0x4D, (byte) 0xE3, 0x75, (byte) 0x89, (byte) 0xE7, 0x26, (byte) 0xCA, (byte) 0x9A,
            (byte) 0xD7, 0x2B, 0x1E, (byte) 0x9F, 0x48, 0x68, 0x36, (byte) 0xAE, (byte) 0x96, (byte) 0xFC, 0x6E, (byte) 0xC1, (byte) 0xEC, 0x50, 0x4D, (byte) 0xFC, 0x35, (byte) 0x81,
            (byte) 0xD7, 0x20, 0x5E, (byte) 0x98, 0x38, 0x6A, (byte) 0x92, (byte) 0xAF, 0x2D, (byte) 0xBC, 0x1D, (byte) 0xB1, (byte) 0xC9, (byte) 0xB4, 0x56, (byte) 0xF7, 0x7E, (byte) 0xC6,
            (byte) 0xA0, 0x52, (byte) 0xF8, 0x3D, (byte) 0x82, (byte) 0x91, (byte) 0xA1, (byte) 0xAC, 0x78, 0x7D, (byte) 0xE2, (byte) 0xA1, (byte) 0x89, (byte) 0xB8, 0x66, (byte) 0xF2, (byte) 0xAA, (byte) 0xC5,
            (byte) 0xBF, 0x13, 0x30, 0x0D, (byte) 0xD4, 0x05, (byte) 0x9F, 0x43, 0x28, 0x31, (byte) 0xDE, (byte) 0x94, 0x58, 0x6F, 0x7A, (byte) 0xAC, 0x23, 0x3D,
            (byte) 0xD9, (byte) 0xD1, (byte) 0x9A, (byte) 0xDC, 0x6B, 0x19, (byte) 0xEF, 0x4A, (byte) 0xCC, 0x37, 0x15, (byte) 0xD6, (byte) 0x8F, 0x1E, (byte) 0xE4, 0x08, 0x4B, 0x46,
            (byte) 0xB7, 0x72, (byte) 0xF6, (byte) 0xA5, (byte) 0x86, (byte) 0xFB, 0x22, (byte) 0xC3, 0x59, (byte) 0x91, (byte) 0xFA, (byte) 0xEC, 0x43, 0x0D, (byte) 0xF1, (byte) 0xC5, (byte) 0x84, 0x53,
            0x23, 0x7D, (byte) 0xD9, (byte) 0xE1, (byte) 0x9A, (byte) 0xC8, 0x6B, 0x16, (byte) 0xAF, 0x4E, (byte) 0xFC, 0x34, 0x41, (byte) 0xD7, 0x70, 0x5E, (byte) 0xA4, 0x38,
            0x7B, 0x52, (byte) 0xA3, 0x7D, (byte) 0xB9, (byte) 0xE1, (byte) 0xB2, (byte) 0xC8, 0x75, (byte) 0x96, (byte) 0xA7, 0x2E, (byte) 0xFA, (byte) 0x9C, 0x43, 0x29, (byte) 0xF1, (byte) 0xDE,
            (byte) 0xC4, 0x58, 0x53, 0x7A, (byte) 0xBD, (byte) 0xE3, 0x31, (byte) 0x89, (byte) 0xD4, 0x66, (byte) 0xDF, 0x6A, (byte) 0xD8, 0x2F, 0x1A, (byte) 0x9C, 0x0B, 0x29,
            (byte) 0xC7, 0x5E, (byte) 0xD2, (byte) 0xB8, 0x5D, (byte) 0xB2, (byte) 0xB9, (byte) 0xB5, (byte) 0xB2, (byte) 0xF7, 0x35, (byte) 0x86, (byte) 0x97, 0x22, (byte) 0xEE, (byte) 0x99, (byte) 0x8C, 0x6A,
            (byte) 0xE5, (byte) 0xEF, 0x0B, 0x0C, 0x07, 0x45, (byte) 0xC2, (byte) 0xB3, 0x11, (byte) 0xB5, (byte) 0xCC, 0x77, 0x15, (byte) 0xE6, (byte) 0x8F, 0x0A, (byte) 0xE4, 0x07,
            0x0B, 0x42, (byte) 0x87, 0x71, (byte) 0xA2, (byte) 0xA4, 0x79, (byte) 0xBB, 0x62, (byte) 0xF3, 0x69, (byte) 0x85, (byte) 0xEE, (byte) 0xE3, 0x0C, 0x49, (byte) 0xC5, (byte) 0xF6,
            (byte) 0xD3, 0x06, (byte) 0xDD, (byte) 0xC2, (byte) 0xD9, (byte) 0x91, (byte) 0x9A, (byte) 0xEC, 0x6B, 0x0D, (byte) 0xEF, 0x45, (byte) 0x8C, 0x33, 0x25, (byte) 0xD5, (byte) 0xDB, 0x1F,
            0x1B, 0x48, 0x0B, 0x76, (byte) 0x87, 0x66, (byte) 0xE2, (byte) 0xAA, (byte) 0xC9, (byte) 0xBF, 0x16, (byte) 0xF0, 0x0E, (byte) 0xC4, 0x04, 0x53, 0x43, 0x7D,
            (byte) 0xF1, (byte) 0xE1, (byte) 0x84, 0x48, 0x63, 0x76, (byte) 0xA9, (byte) 0xE6, (byte) 0xFE, (byte) 0xCA, (byte) 0xC0, 0x57, 0x10, 0x3E, (byte) 0x8C, 0x10, 0x65, (byte) 0xCC,
            0x2B, 0x15, (byte) 0xDF, 0x4F, 0x18, 0x34, 0x0A, (byte) 0x97, 0x47, 0x2E, (byte) 0xB2, (byte) 0x9C, 0x75, (byte) 0xA9, (byte) 0xE7, 0x3E, (byte) 0xCA, (byte) 0x90,
            0x57, 0x2C, 0x3E, (byte) 0x9D, (byte) 0xD0, 0x69, (byte) 0x9C, 0x2E, (byte) 0xE9, (byte) 0xDC, 0x4E, (byte) 0xD9, (byte) 0xF4, 0x5A, (byte) 0xC7, 0x7B, 0x12, (byte) 0xA3,
            0x4D, (byte) 0xB9, (byte) 0xF5, (byte) 0xB2, (byte) 0xC7, 0x35, (byte) 0x92, (byte) 0x97, 0x2D, (byte) 0xAE, (byte) 0x9D, (byte) 0xBC, 0x69, (byte) 0xB1, (byte) 0xEE, (byte) 0xF4, 0x4C, 0x47,
            0x75, (byte) 0xF2, (byte) 0xA7, 0x05, (byte) 0xBA, (byte) 0x83, 0x33, 0x21, (byte) 0xD5, (byte) 0xD8, 0x5F, 0x1A, (byte) 0xB8, 0x0B, 0x32, (byte) 0x87, 0x55, (byte) 0xA2,
            (byte) 0xBF, 0x39, (byte) 0xB0, 0x12, (byte) 0xF4, 0x0D, (byte) 0x87, 0x45, (byte) 0xA2, (byte) 0xB3, 0x39, (byte) 0xB5, (byte) 0xD2, (byte) 0xF7, 0x1D, (byte) 0x86, (byte) 0x89, (byte) 0xA2,
            (byte) 0xE6, (byte) 0xF9, (byte) 0x8A, (byte) 0xC2, (byte) 0xE7, 0x11, (byte) 0x8A, (byte) 0x8C, 0x67, 0x25, (byte) 0xEA, (byte) 0x9B, 0x0F, 0x2B, 0x44, 0x1F, 0x73, 0x48,
            0x25, (byte) 0xF6, (byte) 0x9B, 0x06, (byte) 0xEB, 0x42, (byte) 0xCF, 0x71, (byte) 0x94, 0x24, 0x6F, 0x5B, 0x6C, 0x3B, 0x6D, (byte) 0xD3, 0x6D, (byte) 0x9D,
            (byte) 0xED, (byte) 0xA9, (byte) 0x8D, (byte) 0xBE, (byte) 0xE5, (byte) 0xB0, 0x4B, 0x34, 0x37, 0x57, 0x56, (byte) 0xBE, (byte) 0xBE, (byte) 0xF0, 0x70, 0x44, 0x24, 0x33,
            0x5B, 0x55, (byte) 0xFB, 0x7F, 0x03, 0x60, 0x01, (byte) 0xE8, 0x00, 0x4E, (byte) 0x80, 0x34, 0x60, 0x17, 0x68, 0x0E, (byte) 0xAE, (byte) 0x84,
            0x7C, 0x63, 0x61, (byte) 0xE9, (byte) 0xE8, 0x4E, (byte) 0xCE, (byte) 0xB4, 0x54, 0x77, 0x7F, 0x66, (byte) 0xA0, 0x2A, (byte) 0xF8, 0x1F, 0x02, (byte) 0x88,
            0x01, (byte) 0xA6, (byte) 0x80, 0x7A, (byte) 0xE0, 0x23, 0x08, 0x19, (byte) 0xC6, (byte) 0x8A, (byte) 0xD2, (byte) 0xE7, 0x1D, (byte) 0x8A, (byte) 0x89, (byte) 0xA7, 0x26, (byte) 0xFA,
            (byte) 0x9A, (byte) 0xC3, 0x2B, 0x11, (byte) 0xDF, 0x4C, 0x58, 0x35, (byte) 0xFA, (byte) 0x97, 0x03, 0x2E, (byte) 0x81, (byte) 0xDC, 0x60, 0x59, (byte) 0xE8, 0x3A,
            (byte) 0xCE, (byte) 0x93, 0x14, 0x6D, (byte) 0xCF, 0x6D, (byte) 0x94, 0x2D, (byte) 0xAF, 0x5D, (byte) 0xBC, 0x39, (byte) 0xB1, (byte) 0xD2, (byte) 0xF4, 0x5D, (byte) 0x87, 0x79,
            (byte) 0xA2, (byte) 0xA2, (byte) 0xF9, (byte) 0xB9, (byte) 0x82, (byte) 0xF2, (byte) 0xE1, (byte) 0x85, (byte) 0x88, 0x63, 0x26, (byte) 0xA9, (byte) 0xDA, (byte) 0xFE, (byte) 0xDB, 0x00, 0x5B, 0x40,
            0x3B, 0x70, 0x13, 0x64, 0x0D, (byte) 0xEB, 0x45, (byte) 0x8F, 0x73, 0x24, 0x25, (byte) 0xDB, 0x5B, 0x1B, 0x7B, 0x4B, 0x63, 0x77,
            0x69, (byte) 0xE6, (byte) 0xAE, (byte) 0xCA, (byte) 0xFC, 0x57, 0x01, (byte) 0xFE, (byte) 0x80, 0x40, 0x60, 0x30, 0x28, 0x14, 0x1E, (byte) 0x8F, 0x48, 0x64,
            0x36, (byte) 0xAB, 0x56, (byte) 0xFF, 0x7E, (byte) 0xC0, 0x20, 0x50, 0x18, 0x3C, 0x0A, (byte) 0x91, (byte) 0xC7, 0x2C, 0x52, (byte) 0x9D, (byte) 0xFD, (byte) 0xA9,
            (byte) 0x81, (byte) 0xBE, (byte) 0xE0, 0x70, 0x48, 0x24, 0x36, (byte) 0x9B, 0x56, (byte) 0xEB, 0x7E, (byte) 0xCF, 0x60, 0x54, 0x28, 0x3F, 0x5E, (byte) 0x90,
            0x38, 0x6C, 0x12, (byte) 0xAD, (byte) 0xCD, (byte) 0xBD, (byte) 0x95, (byte) 0xB1, (byte) 0xAF, 0x34, 0x7C, 0x17, 0x61, (byte) 0xCE, (byte) 0xA8, 0x54, 0x7E, (byte) 0xBF,
            0x60, 0x70, 0x28, 0x24, 0x1E, (byte) 0x9B, 0x48, 0x6B, 0x76, (byte) 0xAF, 0x66, (byte) 0xFC, 0x2A, (byte) 0xC1, (byte) 0xDF, 0x10, 0x58, 0x0C,
            0x3A, (byte) 0x85, (byte) 0xD3, 0x23, 0x1D, (byte) 0xD9, (byte) 0xC9, (byte) 0x9A, (byte) 0xD6, (byte) 0xEB, 0x1E, (byte) 0xCF, 0x48, 0x54, 0x36, (byte) 0xBF, 0x56, (byte) 0xF0,
            0x3E, (byte) 0xC4, 0x10, 0x53, 0x4C, 0x3D, (byte) 0xF5, (byte) 0xD1, (byte) 0x87, 0x1C, 0x62, (byte) 0x89, (byte) 0xE9, (byte) 0xA6, (byte) 0xCE, (byte) 0xFA, (byte) 0xD4, 0x43,
            0x1F, 0x71, (byte) 0xC8, 0x24, 0x56, (byte) 0x9B, 0x7E, (byte) 0xEB, 0x60, 0x4F, 0x68, 0x34, 0x2E, (byte) 0x97, 0x5C, 0x6E, (byte) 0xB9, (byte) 0xEC,
            0x72, (byte) 0xCD, (byte) 0xE5, (byte) 0x95, (byte) 0x8B, 0x2F, 0x27, 0x5C, 0x1A, (byte) 0xB9, (byte) 0xCB, 0x32, (byte) 0xD7, 0x55, (byte) 0x9E, (byte) 0xBF, 0x28, 0x70,
            0x1E, (byte) 0xA4, 0x08, 0x7B, 0x46, (byte) 0xA3, 0x72, (byte) 0xF9, (byte) 0xE5, (byte) 0x82, (byte) 0xCB, 0x21, (byte) 0x97, 0x58, 0x6E, (byte) 0xBA, (byte) 0xAC, 0x73,
            0x3D, (byte) 0xE5, (byte) 0xD1, (byte) 0x8B, 0x1C, 0x67, 0x49, (byte) 0xEA, (byte) 0xB6, (byte) 0xCF, 0x36, (byte) 0xD4, 0x16, (byte) 0xDF, 0x4E, (byte) 0xD8, 0x34, 0x5A,
            (byte) 0x97, 0x7B, 0x2E, (byte) 0xA3, 0x5C, 0x79, (byte) 0xF9, (byte) 0xE2, (byte) 0xC2, (byte) 0xC9, (byte) 0x91, (byte) 0x96, (byte) 0xEC, 0x6E, (byte) 0xCD, (byte) 0xEC, 0x55, (byte) 0x8D,
            (byte) 0xFF, 0x25, (byte) 0x80, 0x1B, 0x20, 0x0B, 0x58, 0x07, 0x7A, (byte) 0x82, (byte) 0xA3, 0x21, (byte) 0xB9, (byte) 0xD8, 0x72, (byte) 0xDA, (byte) 0xA5, (byte) 0x9B,
            0x3B, 0x2B, 0x53, 0x5F, 0x7D, (byte) 0xF8, 0x21, (byte) 0x82, (byte) 0x98, 0x61, (byte) 0xAA, (byte) 0xA8, 0x7F, 0x3E, (byte) 0xA0, 0x10, 0x78, 0x0C,
            0x22, (byte) 0x85, (byte) 0xD9, (byte) 0xA3, 0x1A, (byte) 0xF9, (byte) 0xCB, 0x02, (byte) 0xD7, 0x41, (byte) 0x9E, (byte) 0xB0, 0x68, 0x74, 0x2E, (byte) 0xA7, 0x5C, 0x7A,
            (byte) 0xB9, (byte) 0xE3, 0x32, (byte) 0xC9, (byte) 0xD5, (byte) 0x96, (byte) 0xDF, 0x2E, (byte) 0xD8, 0x1C, 0x5A, (byte) 0x89, (byte) 0xFB, 0x26, (byte) 0xC3, 0x5A, (byte) 0xD1, (byte) 0xFB,
            0x1C, 0x43, 0x49, (byte) 0xF1, (byte) 0xF6, (byte) 0xC4, 0x46, (byte) 0xD3, 0x72, (byte) 0xDD, (byte) 0xE5, (byte) 0x99
    };

    public static final byte[] SyncMark = {
            0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, 0x00
    };

    public static byte[] Scramble(byte[] sector) {
        if (sector == null ||
                sector.length < 2352)
            return sector;

        byte[] sync = new byte[12];
        System.arraycopy(sector, 0, sync, 0, 12);

        if (!Arrays.equals(SyncMark, sync))
            return sector;

        byte[] scrambled = new byte[sector.length];

        for (int i = 0; i < 2352; i++)
            scrambled[i] = (byte) (sector[i] ^ ScrambleTable[i]);

        if (sector.length <= 2352)
            return scrambled;

        System.arraycopy(sector, 2352, scrambled, 2352, sector.length - 2352);

        return scrambled;
    }

    public static byte[] GetUserData(byte[] data, boolean interleaved/* = false*/, byte fileNumber/* = 0*/) {
        if (data.length == 2352 &&
                (data[0] != 0x00 || (data[1] & 0xff) != 0xFF || (data[2] & 0xff) != 0xFF || (data[3] & 0xff) != 0xFF ||
                        (data[4] & 0xff) != 0xFF || (data[5] & 0xff) != 0xFF || (data[6] & 0xff) != 0xFF || (data[7] & 0xff) != 0xFF ||
                        (data[8] & 0xff) != 0xFF || (data[9] & 0xff) != 0xFF || (data[10] & 0xff)  != 0xFF || data[11] != 0x00)) {
            return data;
        } else if (data.length == 2352) {
            switch (data[15]) {
            case 0:
                return new byte[2048];
            case 1:
                byte[] sector = new byte[2048];
                System.arraycopy(data, 16, sector, 0, 2048);

                return sector;
            case 2:
                return GetUserDataFromMode2(data, interleaved, fileNumber);
            default:
                return data;
            }
        } else if (data.length == 2336) {
            return GetUserDataFromMode2(data, interleaved, fileNumber);
        } else {
            return data;
        }
    }

    public static byte[] GetUserDataFromMode2(byte[] data, boolean interleaved/* = false*/, byte fileNumber/* = 0*/) {
        if (data.length != 2352 &&
                data.length != 2336)
            return data;

        int pos = 0;

        if (data.length == 2352) {
            if ((data[0] & 0xff) != 0x00 ||
                    (data[1] & 0xff) != 0xFF ||
                    (data[2] & 0xff) != 0xFF ||
                    (data[3] & 0xff) != 0xFF ||
                    (data[4] & 0xff) != 0xFF ||
                    (data[5] & 0xff) != 0xFF ||
                    (data[6] & 0xff) != 0xFF ||
                    (data[7] & 0xff) != 0xFF ||
                    (data[8] & 0xff) != 0xFF ||
                    (data[9] & 0xff) != 0xFF ||
                    (data[10] & 0xff) != 0xFF ||
                    data[11] != 0x00 ||
                    data[15] != 0x02)
                return data;

            pos = 16;
        }

        // This is not the sector you are looking for
        if (interleaved && data[pos] != fileNumber)
            return null;

        int len = (data[pos + 2] & 0x20) == 0x20 ? 2324 : 2048;
        pos += 8;

        byte[] sector = new byte[len];
        System.arraycopy(data, pos, sector, 0, len);

        return sector;
    }

    public static String Prettify(byte[] buffer) {
        if (buffer == null ||
                buffer.length <= 0)
            return null;

        if (buffer[0] != 0x00 ||
                (buffer[1] & 0xff) != 0xFF ||
                (buffer[2] & 0xff) != 0xFF ||
                (buffer[3] & 0xff) != 0xFF ||
                (buffer[4] & 0xff) != 0xFF ||
                (buffer[5] & 0xff) != 0xFF ||
                (buffer[6] & 0xff) != 0xFF ||
                (buffer[7] & 0xff) != 0xFF ||
                (buffer[8] & 0xff) != 0xFF ||
                (buffer[9] & 0xff) != 0xFF ||
                (buffer[10] & 0xff) != 0xFF ||
                buffer[11] != 0x00)
            return "CD sector.";

        StringBuilder sb = new StringBuilder();

        sb.append("CD-ROM sector.\n");

        byte min = buffer[12];
        byte sec = buffer[13];
        byte frame = buffer[14];
        int lba = 0;
        boolean moreThan90 = false;

        if ((min & 0xff) > 0x90) {
            lba += 405000;
            min -= 0x90;
            moreThan90 = true;
        }

        lba += (((min >> 4) * 10) + (min & 0x0F)) * 75 * 60;
        lba += (((sec >> 4) * 10) + (sec & 0x0F)) * 75;
        lba += ((frame >> 4) * 10) + (frame & 0x0F);
        lba -= 150;

        if (moreThan90)
            min = (byte) (min + 0x90);

        sb.append(String.format("Position %2x:%2x:%2x (LBA %d)", min, sec, frame, lba)).append("\n");

        switch (buffer[15] & 0x03) {
        case 0:
            sb.append("Mode 0.").append("\n");
            break;
        case 1:
            sb.append("Mode 1.").append("\n");
            break;
        case 2:
            sb.append("Mode 2.").append("\n");
            break;
        case 3:
            sb.append("Invalid mode 0.").append("\n");
            break;
        }

        switch ((buffer[15] & 0xE0) >> 5) {
        case 0:
            sb.append("User data block").append("\n");
            break;
        case 1:
            sb.append("Fourth run-in block").append("\n");
            break;
        case 2:
            sb.append("Third run-in block").append("\n");
            break;
        case 3:
            sb.append("Second run-in block").append("\n");
            break;
        case 4:
            sb.append("First run-in block").append("\n");
            break;
        case 5:
            sb.append("Link block").append("\n");
            break;
        case 6:
            sb.append("Second run-out block").append("\n");
            break;
        case 7:
            sb.append("First run-out block").append("\n");

            break;
        }

        Boolean[] correctEccP = new Boolean[1];
        Boolean[] correctEccQ = new Boolean[1];
        Boolean[] correctEdc = new Boolean[1];
        CdChecksums.checkCdSector(buffer, /*out boolean?*/correctEccP, /*out boolean?*/correctEccQ, /*out boolean?*/correctEdc);

        boolean empty = true;

        switch (buffer[15] & 0x03) {
        case 0:

            for (int i = 16; i < 2352; i++) {
                if (buffer[i] != 0x00) {
                    empty = false;

                    break;
                }
            }

            sb.append(empty ? "Correct sector contents." : "Incorrect sector contents.").append("\n");

            break;
        case 1:
            sb.append(correctEdc[0] ? "Correct EDC." : "Incorrect EDC.").append("\n");
            sb.append(correctEccP[0] ? "Correct ECC P." : "Incorrect ECC P.").append("\n");
            sb.append(correctEccQ[0] ? "Correct ECC Q." : "Incorrect ECC Q.").append("\n");

            for (int i = 2068; i < 2076; i++) {
                if (buffer[i] != 0x00) {
                    empty = false;

                    break;
                }
            }

            sb.append(empty ? "Correct zero fill." : "Incorrect zero fill.").append("\n");

            break;
        case 2:
            if (buffer[16] != buffer[20] ||
                    buffer[17] != buffer[21] ||
                    buffer[18] != buffer[22] ||
                    buffer[19] != buffer[23]) {
                sb.append("Subheader copies differ.").append("\n");
                sb.append(correctEdc[0] ? "Correct EDC." : "Incorrect EDC.").append("\n");
                sb.append(correctEccP[0] ? "Correct ECC P." : "Incorrect ECC P.").append("\n");
                sb.append(correctEccQ[0] ? "Correct ECC Q." : "Incorrect ECC Q.").append("\n");

                break;
            }

            sb.append(String.format("File number: %d", buffer[16])).append("\n");
            ;
            sb.append(String.format("Channel number: %d", buffer[17])).append("\n");
            ;
            sb.append(String.format("Coding information number: %d", buffer[19])).append("\n");
            ;

            if ((buffer[18] & 0x80) == 0x80)
                sb.append("End of file.").append("\n");

            if ((buffer[18] & 0x40) == 0x40)
                sb.append("Real-time block.").append("\n");

            sb.append((buffer[18] & 0x20) == 0x20 ? "Form 2." : "Form 1.").append("\n");

            if ((buffer[18] & 0x10) == 0x10)
                sb.append("Trigger block.").append("\n");

            if ((buffer[18] & 0x08) == 0x08)
                sb.append("Data block.").append("\n");

            if ((buffer[18] & 0x04) == 0x04)
                sb.append("Audio block.").append("\n");

            if ((buffer[18] & 0x02) == 0x02)
                sb.append("Video block.").append("\n");

            if ((buffer[18] & 0x01) == 0x01)
                sb.append("End of record.").append("\n");

            if ((buffer[18] & 0x20) != 0x20) {
                sb.append(correctEccP[0] ? "Correct ECC P." : "Incorrect ECC P.").append("\n");
                sb.append(correctEccQ[0] ? "Correct ECC Q." : "Incorrect ECC Q.").append("\n");
            }

            sb.append(correctEdc[0] ? "Correct EDC." : "Incorrect EDC.").append("\n");

            break;
        }

        return sb.toString();
    }
}
