//
// Copyright (c) 2008-2011, Kenneth Bell
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

package DiscUtils.Diagnostics;

import java.util.ArrayList;
import java.util.List;


/**
 * The report generated by replaying file system actions from a checkpoint.
 * This report contains detailed tracing information.
 */
public final class ReplayReport {
    private Exception _failureException;

    private Exception _replayException;

    private List<StreamTraceRecord> _globalTraceReport;

    private List<StreamTraceRecord> _traceReport;

    private int _replayBufferSize;

    private int _eventsReplayed;

    private long _eventsBeforeLockdown;

    private String _replayPreVerificationReport;

    private boolean _failedVerifyOnReplay;

    private String _replayVerificationReport;

    private String _lastCheckpointReport;

    public ReplayReport(Exception failureEx,
            Exception replayEx,
            TracingStream globalTraceStream,
            TracingStream traceStream,
            int replayBufferSize,
            int eventsReplayed,
            long eventsBeforeLockdown,
            String replayPreVerificationReport,
            boolean failedVerifyOnReplay,
            String replayVerificationReport,
            String lastCheckpointReport) {
        _failureException = failureEx;
        _replayException = replayEx;
        _globalTraceReport = new ArrayList<>(globalTraceStream.getLog());
        _traceReport = new ArrayList<>(traceStream.getLog());
        _replayBufferSize = replayBufferSize;
        _eventsReplayed = eventsReplayed;
        _eventsBeforeLockdown = eventsBeforeLockdown;
        _replayPreVerificationReport = replayPreVerificationReport;
        _failedVerifyOnReplay = failedVerifyOnReplay;
        _replayVerificationReport = replayVerificationReport;
        _lastCheckpointReport = lastCheckpointReport;
    }

    /**
     * The exception (if any) that caused the file system verification check to
     * fail.
     */
    public Exception getVerificationFailureException() {
        return _failureException;
    }

    /**
     * The exception (if any) that cause the full replay to fail.
     */
    public Exception getReplayException() {
        return _replayException;
    }

    /**
     * The stream activities traced whilst replaying the file system action that
     * broke the file system.
     */
    public List<StreamTraceRecord> getInterCheckpointStreamTraceLog() {
        return _globalTraceReport;
    }

    /**
     * The stream activities traced whilst replaying the file system action that
     * broke the file system.
     */
    public List<StreamTraceRecord> getReplayStreamTraceLog() {
        return _traceReport;
    }

    /**
     * The number of replay events available to replay.
     */
    public int getReplayEventsAvailable() {
        return _replayBufferSize;
    }

    /**
     * The number of replay events successfully replayed.
     */
    public int getReplayEventsProcessed() {
        return _eventsReplayed;
    }

    /**
     * Gets whether file system corruption was detected whilst replaying events.
     */
    public boolean getReplayFailedVerification() {
        return _failedVerifyOnReplay;
    }

    /**
     * Gets the file system verification report generated at the last
     * checkpoint.
     */
    public String getLastCheckpointReport() {
        return _lastCheckpointReport;
    }

    /**
     * Gets the file system verification report generated whilst just before
     * replaying the file system action that failed.
     */
    public String getReplayPreVerificationReport() {
        return _replayPreVerificationReport;
    }

    /**
     * Gets the file system verification report generated whilst replaying the
     * file system action that failed.
     */
    public String getReplayVerificationReport() {
        return _replayVerificationReport;
    }

    /**
     * The total number of events processed (ignoring events run during replay).
     */
    public long getTotalEventsProcessed() {
        return _eventsBeforeLockdown;
    }
}
